name: Build EasyTier-web

on:
  workflow_dispatch:  # 允许手动触发

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Install Linux Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev build-essential protobuf-compiler tree

    # 构建前端
    - name: Build Frontend
      run: |
        cd easytier-web
        echo "=== Current directory ==="
        pwd
        ls -la
        
        echo "=== Installing dependencies ==="
        pnpm install
        
        echo "=== Building frontend-lib ==="
        cd frontend-lib
        pwd
        ls -la
        pnpm build
        echo "=== frontend-lib build result ==="
        ls -la
        
        echo "=== Building frontend ==="
        cd ../frontend
        pwd
        ls -la
        pnpm build
        echo "=== frontend build result ==="
        ls -la

    # 构建后端
    - name: Build Backend
      run: |
        cd easytier-web
        echo "=== Current directory ==="
        pwd
        ls -la
        echo "=== Building backend ==="
        cargo build --release --verbose
        echo "=== Checking build results ==="
        find . -name "target" -type d -exec ls -la {} \;
        find . -name "easytier*" -type f -exec ls -la {} \;

    # 打包
    - name: Package Build
      run: |
        cd easytier-web
        echo "=== Current directory ==="
        pwd
        ls -la
        
        echo "=== Creating release directory ==="
        rm -rf release
        mkdir -p release
        
        echo "=== Finding build artifacts ==="
        find . -type f -name "easytier*" -exec ls -la {} \;
        
        echo "=== Copying files ==="
        # 尝试复制后端二进制文件
        if [ -f "target/release/easytier-web" ]; then
          cp target/release/easytier-web release/
        elif [ -f "target/release/easytier_web" ]; then
          cp target/release/easytier_web release/easytier-web
        else
          echo "Warning: Backend binary not found in expected locations"
          # 尝试查找二进制文件
          BINARY=$(find . -type f -name "easytier*" ! -name "*.d" ! -name "*.pdb" | head -n 1)
          if [ ! -z "$BINARY" ]; then
            echo "Found binary at: $BINARY"
            cp "$BINARY" release/easytier-web
          else
            echo "Error: No backend binary found!"
            exit 1
          fi
        fi
        
        # 复制前端文件
        if [ -d "frontend/dist" ]; then
          cp -r frontend/dist release/
        else
          echo "Error: Frontend dist directory not found!"
          exit 1
        fi
        
        echo "=== Release directory contents ==="
        ls -la release/
        
        echo "=== Creating archive ==="
        tar -czvf easytier-web-linux.tar.gz release/

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: easytier-web-linux
        path: easytier-web/easytier-web-linux.tar.gz
        retention-days: 5
